class SurveyResponse < ApplicationRecord
  belongs_to :survey

  # This is a UUID supplied by the user that uniquely and anonymously identifies them.
  # It is expected to be generated by and stored on the user's device.
  validates :user_identifier, presence: true

  # This is a UUID that is generated by the server and is used to publicly identify the response.
  # We expose UUIDs publicly instead of the id field to avoid insecure direct object reference attacks
  # and leaking information about the number of responses.
  validates :public_identifier, presence: true

  after_initialize do
    self.public_identifier ||= SecureRandom.hex(10)
  end

  # Response Data

  attribute :responses, SurveyResponseContent.to_array_type

  # Merges new responses into the existing responses. If a response with the same question_id already exists,
  # it will be replaced with the new response. If a response with the same question_id does not exist, it will be added.
  # This method does not save the record.
  # @param new_responses [Array<SurveyResponseContent>] The new responses to merge into the existing responses.
  def upsert_responses(new_responses)
    new_response_dictionary = new_responses.index_by(&:question_id)
    current_response_dictionary = responses&.index_by(&:question_id) || {}
    all_keys = new_response_dictionary.keys | current_response_dictionary.keys

    self.responses = all_keys.map do |key|
      new_response_dictionary[key] || current_response_dictionary[key]
    end
  end

  # Merges new responses into the existing responses. If a response with the same question_id already exists,
  # it will be replaced with the new response. If a response with the same question_id does not exist, it will be added.
  # This method calls save! on self.
  # @param new_responses [Array<SurveyResponseContent>] The new responses to merge into the existing responses.
  def upsert_responses!(new_responses)
    upsert_responses(new_responses)
    save!
  end
end
